<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>üïµÔ∏è‚Äç‚ôÇÔ∏è ParamHawk - Bounty Assistant</title>
  <style>
    body {
      background-color: #0a0f0d;
      color: #e0f2f1;
      font-family: 'Courier New', Courier, monospace;
      padding: 15px;
      width: 350px;
    }
    h1 {
      color: #00ffcc;
      font-size: 18px;
      margin-bottom: 10px;
      text-align: center;
      border-bottom: 1px solid #00ffcc;
      padding-bottom: 5px;
    }
    #param-list {
      background: #1a1f1e;
      padding: 10px;
      border-radius: 6px;
      max-height: 250px;
      overflow-y: auto;
      border: 1px solid #2e4440;
      font-size: 13px;
    }
    .param-item {
      margin: 4px 0;
      padding: 4px 6px;
      border-radius: 4px;
    }
    .low { color: #9effa5; }
    .medium { color: #fff38a; }
    .high { color: #ff6b6b; }

    .footer {
      margin-top: 12px;
      font-size: 11px;
      color: #607d8b;
      text-align: center;
    }
  </style>
</head>
<body>
  <h1>üïµÔ∏è‚Äç‚ôÇÔ∏è ParamHawk</h1>
  <div id="param-list">Loading parameters...</div>
  <div class="footer">Crafted for Bug Bounty Hunters</div>
  <script>
    function getRiskScore(name) {
      const patterns = [
        [/token|auth|access/, 'Auth Bypass', 90, 'high'],
        [/redirect|url/, 'Open Redirect', 85, 'high'],
        [/id|user|account/, 'IDOR', 75, 'medium'],
        [/callback|jsonp/, 'XSS via JSONP', 85, 'high'],
        [/search|query|q/, 'Reflected XSS', 70, 'medium'],
        [/debug|test/, 'Debug Exposure', 60, 'medium']
      ];
      for (let [regex, type, score, riskClass] of patterns) {
        if (regex.test(name)) return { type, score, riskClass };
      }
      return { type: 'Low Risk', score: 30, riskClass: 'low' };
    }

    chrome.runtime.sendMessage({ type: 'getParams' }, res => {
      const listDiv = document.getElementById('param-list');
      listDiv.innerHTML = '';

      if (!res || !res.params || res.params.length === 0) {
        listDiv.innerText = 'No parameters found.';
        return;
      }

      res.params.forEach(p => {
        const score = getRiskScore(p);
        const item = document.createElement('div');
        item.className = `param-item ${score.riskClass}`;
        item.textContent = `${p}  ‚Üí  ${score.score}%  (${score.type})`;
        listDiv.appendChild(item);
      });
    });
  </script>
</body>
</html>
